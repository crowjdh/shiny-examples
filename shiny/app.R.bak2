library(spdplyr)
library(bit64)
library(data.table)
library(dplyr)
library(ggplot2)
library(shiny)
library(shinycustomloader)
library(flexdashboard)
library(readxl)
library(dplyr)
library(shinyWidgets)
library(rvest)
library(extrafont)
library(shinydashboard)
library(leaflet)
library(png)
library(showtext)
library(rsconnect)
library(ggmap)
library(tidyr)
library(raster)
library(rgeos)
library(maptools)
library(devtools)
library(gganimate)
library(tidyverse)
library(showtext)
library(rgdal)
library(geosphere)
library(leaflet)
library(babynames)
library(hrbrthemes)
library(viridis)
library(gifski)
library(png)
library(scales)
library(plotly)
library(RColorBrewer)
# devtools::install_github("thomasp85/gganimate", ref="v0.1.1")
require(devtools)
# devtools::install_github("dgrtwo/gganimate")
# rsconnect::setAccountInfo(name='minha', token='B614D14DAF5D24F08272324925C3B366', secret='yGxOc0kvA0iHfpRpRXmHUoomxSX3sAymIfCQ/Vva')

load("REGION_MVT.RData") # 전입전출 파이차트
load("REGION_CTPRVN.RData") # 전입전출 파이차트

region=unique(REGION_MVT$MVT_CTPRVN_NM)

load("TRNSFRN_count.RData") # 전입전출 막대그래프 
load("MVT_count.RData") # 전입전출 막대그래프 

load('total.RData')
load('worker.RData')
load('patent.RData')
load('new.RData')
load('venture.RData')
load('waegam.RData')
load('clean.RData')
load('mainbiz.RData')
load('innobiz.RData')
load('nep.RData')
load('net.RData')

mycolors <- colorRampPalette(brewer.pal(8, "Set2"))(17)

load('KED4_abcd.RData') # 신용평가등급
load('d4.RData') # 조기경보등급
load("flows.RData") # 전입전출지도
pal <- colorFactor(brewer.pal(4, 'Set2'), flows$origins)

font_add_google("Nanum Gothic", "nanumgothic")
showtext_auto()
showtext_opts(dpi = 60)


load('BR_m.RData') #회생파산현황
region<-sort(unique(BR_m$CTPRVN_NM))


################################# 샤이니앱  ######################################

ui <- dashboardPage(skin = 'black',
                    dashboardHeader(title = "시계열 데이터 시각화를 통한 지역경제 흐름 진단",
                                    titleWidth = 700),
                    dashboardSidebar(
                      sidebarMenu(
                        menuItem("개요", tabName = "c", icon = icon("dashboard")),
                        menuItem("재무현황", tabName = "d", icon = icon("map")),
                        menuItem("신용평가등급", tabName = "e", icon = icon("bar-chart-o")),
                        menuItem("조기경보등급", tabName = "a", icon = icon("pie-chart")),
                        menuItem("전입전출현황", tabName = "b", icon = icon("map-marker")),
                        menuItem("회생파산현황", tabName = "f", icon = icon("line-chart"))
                      )
                    ),
                    
                    dashboardBody(
                      
                      tags$head(
                        tags$style(
                          HTML(
                            '.main-header .logo {
            font-family: "Georgia", Times, "Times New Roman", serif;
            font-weight: bold;
            font-size: 26px;}
          
          body {
            font-family: "Georgia", Times, "Times New Roman", serif;
            font-weight: bold;
            font-size: 16px;}'))),
                      
                      tabItems(
                        tabItem(tabName = "b",
                                fluidRow(
                                  div(style = "font-size: 18px;",
                                      box(width = 3, title = tags$p("INPUTS", style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                          
                                          sliderInput("yearInput", "연도",
                                                      min = 2008, max = 2020,
                                                      value = c(2020, 2020)),
                                          
                                          br(),
                                          checkboxGroupInput("companysizeInput",
                                                             "기업 크기", 
                                                             choices=c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"),
                                                             selected = c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"),
                                                             inline = F),
                                          actionButton("checkall", label="전체 선택"),
                                          actionButton("Uncheck", label="전체 선택 해제"),
                                          br(),
                                          br(),
                                          checkboxGroupInput("worktypeInput",
                                                             "업종", 
                                                             choices=c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                                                       "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                                                       "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                                                       "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                                                       "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                                                       "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                                                       "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                                                       "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                                                       "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"
                                                             ),
                                                             selected = c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                                                          "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                                                          "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                                                          "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                                                          "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                                                          "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                                                          "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                                                          "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                                                          "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"),
                                                             inline = F),
                                          actionButton("checkall2", label="전체 선택"),
                                          actionButton("Uncheck2", label="전체 선택 해제"))),
                                  fluidRow(
                                    box(width = 8, height="100%", title = tags$p("지역별 전입전출현황 지도", style = "font-size: 120%; font-weight: bold"), status = "info", solidHeader = TRUE,
                                        leafletOutput("mymap", width="100%", height="1313px"))
                                  )),
                                
                                fluidRow(
                                  box(width = 12, title = tags$p("INPUTS", style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          radioButtons("regiondInput", "지역",
                                                       c("강원" = "강원",
                                                         "경기" = "경기",
                                                         "경남" = "경남",
                                                         "경북" = "경북",
                                                         "광주" = "광주",
                                                         "대구" = "대구",
                                                         "대전" = "대전",
                                                         "부산" = "부산",
                                                         "서울" = "서울",
                                                         "세종" = "세종",
                                                         "울산" = "울산",
                                                         "인천" = "인천",
                                                         "전남" = "전남",
                                                         "전북" = "전북",
                                                         "제주" = "제주",
                                                         "충남" = "충남",
                                                         "충북" = "충북"
                                                       ), inline = T,
                                                       selected = '서울')
                                      ))),
                                
                                
                                fluidRow(
                                  box(width = 6, title = tags$p("지역별 전입 기업 업종 비율 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE,
                                      plotlyOutput("plot10", height = 700, width = "100%")),
                                  box(width = 6, title = tags$p("지역별 전출 기업 업종 비율 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "danger", solidHeader = TRUE,
                                      plotlyOutput("plot11", height = 700, width = "100%"))
                                  
                                  
                                ),
                                
                                
                                
                                fluidRow(
                                  box(width = 6, title = tags$p("지역별 전입 기업 수 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE,
                                      plotlyOutput("plot7", height = 700, width = "100%")),
                                  box(width = 6, title = tags$p("지역별 전출 기업 수 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "danger", solidHeader = TRUE,
                                      plotlyOutput("plot9", height = 700, width = "100%"))
                                ),
                                
                                
                                fluidRow(
                                  box(width = 12, height = "780px", title = tags$p("지역별 전입전출 연결성빈도 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "info", solidHeader = TRUE
                                      , align = "center", imageOutput("preImage3"))
                                )
                        ),
                        
                        tabItem(tabName = "f",
                                fluidRow(
                                  box(width = 2, title = tags$p("INPUTS", style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          radioButtons("regionbInput", "지역",
                                                       c("강원" = "강원",
                                                         "경기" = "경기",
                                                         "경남" = "경남",
                                                         "경북" = "경북",
                                                         "광주" = "광주",
                                                         "대구" = "대구",
                                                         "대전" = "대전",
                                                         "부산" = "부산",
                                                         "서울" = "서울",
                                                         "세종" = "세종",
                                                         "울산" = "울산",
                                                         "인천" = "인천",
                                                         "전남" = "전남",
                                                         "전북" = "전북",
                                                         "제주" = "제주",
                                                         "충남" = "충남",
                                                         "충북" = "충북"
                                                       ),
                                                       selected = '서울')
                                      )),
                                  fluidRow(
                                    box(width = 9, title = tags$p("지역별 회생파산 법정관리 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE,
                                        plotlyOutput("plot8", height = 660, width = "100%"))
                                    
                                    
                                  ))
                                
                        ),
                        
                        tabItem(tabName = "c",
                                fluidPage(
                                  box(width = 2, height = "800px", title = tags$p("INPUTS", style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          checkboxGroupInput("regioncInput", "지역",
                                                             choices=c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                                                       "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"),
                                                             selected = c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                                                          "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"),
                                                             inline = F),
                                          actionButton("checkall", label="전체 선택"),
                                          actionButton("Uncheck", label="전체 선택 해제")
                                          # ,actionButton("selectAll", label = "Select All"),
                                          # actionButton("deselectAll", label = "Deselect All")
                                          
                                      )),
                                  
                                  box(width = 5, height = "300px", title = tags$p("기업 현황", style = "font-size: 120%; font-weight: bold"), status = "info", solidHeader = TRUE,
                                      valueBoxOutput("vbox"),
                                      valueBoxOutput("vbox2"),
                                      valueBoxOutput("vbox3")),
                                  
                                  box(width = 5, height = "300px", title = tags$p("기업 유형 현황", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE,
                                      valueBoxOutput("vbox4"),
                                      valueBoxOutput("vbox5"),
                                      valueBoxOutput("vbox6")),
                                  
                                  box(width = 10, height = "480px", title = tags$p("기업 인증 현황", style = "font-size: 120%; font-weight: bold"), status = "danger", solidHeader = TRUE,
                                      valueBoxOutput("vbox7"),
                                      valueBoxOutput("vbox8"),
                                      valueBoxOutput("vbox9"),
                                      valueBoxOutput("vbox10"),
                                      valueBoxOutput("vbox11"))
                                  
                                )),
                        
                        tabItem(tabName = "a",
                                fluidRow(
                                  box(width = 2, height = "672px",title = tags$p("INPUTS",style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          radioButtons("dangergradeInput", "조기경보등급",
                                                       c("관심" = "관심",
                                                         "관찰1" = "관찰1",
                                                         "관찰2" = "관찰2",
                                                         "관찰3" = "관찰3",
                                                         "정상" = "정상",
                                                         "휴업" = "휴업",
                                                         "폐업" = "폐업",
                                                         "부도" = "부도"))
                                      )),
                                  fluidRow(
                                    box(width = 9, title = tags$p("지역별 조기경보등급 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "danger", solidHeader = TRUE,
                                        plotlyOutput("plot3", height = 600, width = "100%"))
                                    
                                    
                                  )),
                                fluidRow(
                                  box(width = 2, title = tags$p("INPUTS", style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          radioButtons("regionInput", "지역",
                                                       c("강원" = "강원",
                                                         "경기" = "경기",
                                                         "경남" = "경남",
                                                         "경북" = "경북",
                                                         "광주" = "광주",
                                                         "대구" = "대구",
                                                         "대전" = "대전",
                                                         "부산" = "부산",
                                                         "서울" = "서울",
                                                         "세종" = "세종",
                                                         "울산" = "울산",
                                                         "인천" = "인천",
                                                         "전남" = "전남",
                                                         "전북" = "전북",
                                                         "제주" = "제주",
                                                         "충남" = "충남",
                                                         "충북" = "충북"
                                                       ),
                                                       selected = '서울')
                                      )),
                                  fluidRow(
                                    box(width = 9, title = tags$p("지역별 조기경보등급 비율 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "danger", solidHeader = TRUE,
                                        plotlyOutput("plot4", height = 660, width = "100%"))
                                    
                                    
                                  ))),
                        
                        tabItem(tabName = "d",
                                
                                
                                fluidPage(

                                  box(width = 6, height = "700px", title = tags$p("지역별 매출 지도", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE
                                      ,imageOutput("preImage")
                                      ),
                                  box(width = 6, height = "700px", title = tags$p("지역별 부채 지도", style = "font-size: 120%; font-weight: bold"), status = "danger", solidHeader = TRUE
                                      ,imageOutput("preImage2")
                                      )
                                )
                                
                                ),
                        
                        tabItem(tabName = "e",
                                fluidRow(
                                  box(width = 2, height = "672px",title = tags$p("INPUTS",style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          radioButtons("creditgradeInput", "신용평가등급",
                                                       c("A" = "A",
                                                         "B" = "B",
                                                         "C" = "C",
                                                         "D" = "D",
                                                         "NR" = "NR"))
                                      )),
                                  fluidRow(
                                    box(width = 9, title = tags$p("지역별 신용평가등급 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE,
                                        plotlyOutput("plot5", height = 600, width = "100%"))
                                    
                                  )),
                                fluidRow(
                                  box(width = 2, title = tags$p("INPUTS", style = "font-size: 120%; font-weight: bold"), status = "warning", solidHeader = TRUE,
                                      
                                      div(style = "font-size: 22px;",
                                          
                                          radioButtons("regionaInput", "지역",
                                                       c("강원" = "강원",
                                                         "경기" = "경기",
                                                         "경남" = "경남",
                                                         "경북" = "경북",
                                                         "광주" = "광주",
                                                         "대구" = "대구",
                                                         "대전" = "대전",
                                                         "부산" = "부산",
                                                         "서울" = "서울",
                                                         "세종" = "세종",
                                                         "울산" = "울산",
                                                         "인천" = "인천",
                                                         "전남" = "전남",
                                                         "전북" = "전북",
                                                         "제주" = "제주",
                                                         "충남" = "충남",
                                                         "충북" = "충북"
                                                       ),
                                                       selected = '서울')
                                      )),
                                  fluidRow(
                                    box(width = 9, title = tags$p("지역별 신용평가등급 비율 시계열 그래프", style = "font-size: 120%; font-weight: bold"), status = "success", solidHeader = TRUE,
                                        plotlyOutput("plot6", height = 660, width = "100%"))
                                    
                                    
                                  ))
                                
                        ))))



server <- function(input, output, session) {
  
  output$plot3 <- renderPlotly({
    
    filtered2 <- d4 %>% filter(EW_GRAD_NM %in% input$dangergradeInput)
    
    d4_정상_plot<- filtered2 %>% plot_ly(x=~CTPRVN_NM) %>%
      add_trace(y=~ratio, type='bar',frame=~DATE,textfont=list(size=20),
                colors = mycolors,
                color=~CTPRVN_NM,text = ~ratio,
                hovertemplate = paste('%{x}', '<br>', input$dangergradeInput, ':', '%{y}', '%<br>'),
                texttemplate = '%{y:.3r}%',
                textposition = "outside") %>%
      add_trace(y=~ratio_전국, type='scatter',mode='line',frame=~DATE, color=~KOR,
                hovertemplate = paste('전국 평균 : %{y:.4r}')) %>%
      animation_slider(
        currentvalue = list(prefix = "DATE : ", font = list(color="red"))
      ) %>%
      layout(
        xaxis = list(title = list(text="지역",
                                  font=list(family='Nanum Gothic'))),
        yaxis = list(title = "조기경보등급비율(%)"),
        showlegend = F
      )
    
    d4_정상_plot
  })
  
  output$plot4 <- renderPlotly({
    
    filtered3 <- d4 %>% filter(CTPRVN_NM %in% input$regionInput)
    
    filtered3 %>%
      plot_ly(labels = ~EW_GRAD_NM, values = ~ratio, type = 'pie',
              frame=~DATE,sort=F,rotation=0,direction='clockwise',opacity=0.8,
              textfont=list(size=18,color='black'),#textinfo='label+percent',
              marker=list(colors = c('#8dd3c7','#ffffb3','#bebada','#fb8072',
                                     '#fdb462','#80b1d3','#b3de69','#fccde5')), hole=0.5,
              title = list(text=paste(input$regionInput, " 조기경보등급 비율<br>시계열 그래프",sep=''),
                           font=list(family='Nanum Gothic',size=15))) %>%
      animation_slider(
        currentvalue = list(prefix = "DATE ", font = list(color="red"))
      ) %>% animation_opts(transition=500)
  })
  
  
  output$plot5 <- renderPlotly({
    req(input$creditgradeInput)
    
    filtered4 <- KED4_abcd %>% filter(CREDT_ABCD %in% input$creditgradeInput)
    
    
    filtered4 %>% plot_ly(x=~CTPRVN_NM) %>% 
      add_trace(y=~ratio_ABCD, type='bar',frame=~DATE,textfont=list(size=20),
                colors = mycolors,
                color=~CTPRVN_NM,text = ~ratio_ABCD,
                hovertemplate = paste(input$creditgradeInput,'등급<br>', '%{y:.4r}', '%<br>'),
                texttemplate = '%{y:.2r}%',
                textposition = "outside") %>%
      add_trace(y=~ratio, type='scatter',mode='line',frame=~DATE, color=~KOR,
                hovertemplate = paste('전국 평균 : %{y:.4r}')) %>%
      layout(
        title = list(text=paste("지역별 KED신용등급(",input$creditgradeInput,") 시계열 그래프",sep=''),
                     yanchor='top',font=list(family='Nanum Gothic',size=18)),
        xaxis = list(title = "지역"),
        yaxis = list(title = "KED신용등급비율(%)"),
        showlegend = F
      ) %>%
      animation_slider(
        currentvalue = list(prefix = "DATE : ", font = list(color="red"))
      )
  })
  
  output$plot6 <- renderPlotly({
    
    filtered5 <- KED4_abcd %>% filter(CTPRVN_NM %in% input$regionaInput)
    
    filtered5 %>%
      plot_ly(labels = ~CREDT_ABCD, values = ~ratio_ABCD, type = 'pie',
              frame=~DATE,sort=F,rotation=0,direction='clockwise',opacity=0.9,name=input$regionaInput,
              #hoverinfo = 'label+value+text',
              hovertemplate = paste('%{label}등급<br>', '%{value:.4r}', '%<br>'),
              textfont=list(size=c(15),color='black'),textinfo='label+percent',
              marker=list(colors = c('#ACC3FB','#C3FE96','#FDFA99','#FBC893','#FB8383'),
                          line = list(width=0))
              #hole=0.5,
      ) %>%
      layout(title = list(text=paste(input$regionaInput," KED신용등급 비율 시계열 그래프",sep=''),
                          font=list(family='Nanum Gothic',size=18),x=0.53,y=0.95),
             margin=list(t=120),
             legend=list(x=0.8)) %>%
      animation_slider(
        currentvalue = list(prefix = "DATE ", font = list(color="red"))
      ) %>% animation_opts(transition=500)
  })
  
  
  
  
  output$mymap <- renderLeaflet({
    
    
    filtered <- flows %>% filter(STDR_YM %in% input$yearInput,
                                 INDUTY_LCLAS_NM %in% input$worktypeInput,
                                 PRCSS_ENTRPRS_SE %in% input$companysizeInput) %>%
      group_by(origins, destinations) %>%
      mutate(n=sum(counts))
    
    hover <- paste0(filtered$origins, " to ", 
                    filtered$destinations, ': ', 
                    as.character(filtered$n))
    
    leaflet() %>%
      addProviderTiles('CartoDB.Positron') %>%
      addPolylines(data = filtered, weight = ~n/10, label = hover, 
                   group = ~origins, color = ~pal(origins)) %>%
      addLayersControl(overlayGroups = unique(filtered$origins), 
                       options = layersControlOptions(collapsed = FALSE))
  })
  
  
  output$plot8 <- renderPlotly({
    
    filtered7 <- BR_m %>% filter(CTPRVN_NM %in% input$regionbInput)
    
    filtered7 %>% group_by(STDR_YEAR,CTPRVN_NM) %>%
      mutate(cnt_지역LEG=sum(cnt_LEG), ratio=(cnt_LEG/cnt_지역LEG)*100) %>% data.frame() %>%
      rename(DATE=STDR_YEAR) %>%
      plot_ly(x=~DATE) %>%
      add_trace(y=~cnt_LEG, type='scatter',mode='lines+markers',#frame=~CTPRVN_NM,
                #textfont=list(size=20),
                colors = c('#828181','#FDB968','#8187FE','#FF5A5A'),line=list(width=5),marker=list(size=10),
                color=~LEGALMANAGE_SE_NM,#text = ~ratio,
                hoverlabel = list(font=list(color='white')),
                hovertemplate = paste(input$regionbInput,'<br>', '%{y}', '<br>'),
                #texttemplate = '%{y}',
                textposition = "outside") %>%
      layout(
        title = list(text=paste(input$regionbInput," 회생파산 법정관리 시계열 그래프",sep=''),
                     yanchor='top',font=list(family='Nanum Gothic',size=15)),
        xaxis = list(title = "년도"),
        yaxis = list(title = "개수"),
        showlegend = T)
  })
  
  output$vbox <- renderValueBox({
    
    abc <- total %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 3, 
             value = tags$p(abc, style = "font-size: 70%;"),
             subtitle = tags$p("전체 기업 수    ", style = "font-size: 120%;"), 
             icon = icon("info-circle"), 
             color = "blue")
  })
  
  output$vbox2 <- renderValueBox({
    
    abc2 <- worker %>% filter(CTPRVN_NM %in% input$regioncInput)
    
    
    valueBox(width = 3,
             value = tags$p(round(mean(abc2$EMPLY_CO, na.rm = T)), style = "font-size: 70%;"),
             subtitle = tags$p("평균 종업원 수(명)", style = "font-size: 120%;"),
             icon = icon("users"),
             color = "aqua"
    )
  })
  
  output$vbox3 <- renderValueBox({
    
    abc3 <- worker %>% filter(CTPRVN_NM %in% input$regioncInput) 
    
    
    valueBox(width = 3,
             value = tags$p(round(mean(abc3$WAGE_AVRG_AM, na.rm = T)), style = "font-size: 70%;"),
             subtitle = tags$p("평균 연봉(₩)", style = "font-size: 120%;"),
             icon = icon("money"),
             color = "teal"
    )
  })
  
  
  output$vbox4 <- renderValueBox({
    
    abc4 <- venture %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 3, 
             value = tags$p(abc4, style = "font-size: 70%;"),
             subtitle = tags$p("벤처기업 수", style = "font-size: 120%;"), 
             icon = icon("info-circle"), 
             color = "green")
  })
  
  output$vbox5 <- renderValueBox({
    
    abc5 <- waegam %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 2, 
             value = tags$p(abc5, style = "font-size: 70%;"),
             subtitle = tags$p("외감기업 수", style = "font-size: 120%;"), 
             icon = icon("info-circle"), 
             color = "olive")
  })
  
  output$vbox6 <- renderValueBox({
    
    abc6 <- patent %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 2, 
             value = tags$p(abc6, style = "font-size: 70%;"),
             subtitle = tags$p("특허 출원 수", style = "font-size: 120%;"), 
             icon = icon("info-circle"), 
             color = "lime")
  })
  
  output$vbox7 <- renderValueBox({
    
    abc7 <- clean %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 2, 
             value = tags$p(abc7, style = "font-size: 150%;"),
             subtitle = tags$p("환경마크인증 기업 수", style = "font-size: 140%;"), 
             icon = icon("thumbs-up"), 
             color = "yellow")
  })
  
  output$vbox8 <- renderValueBox({
    
    abc8 <- mainbiz %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 2, 
             value = tags$p(abc8, style = "font-size: 150%;"),
             subtitle = tags$p("메인비즈인증 기업 수", style = "font-size: 140%;"), 
             icon = icon("thumbs-up"), 
             color = "orange")
  })
  
  output$vbox9 <- renderValueBox({
    
    abc9 <- innobiz %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 2, 
             value = tags$p(abc9, style = "font-size: 150%;"),
             subtitle = tags$p("이노비즈인증 기업 수", style = "font-size: 140%;"), 
             icon = icon("thumbs-up"), 
             color = "red")
  })
  
  output$vbox10 <- renderValueBox({
    
    abc10 <- nep %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 1, 
             value = tags$p(abc10, style = "font-size: 150%;"),
             subtitle = tags$p("NEP인증 기업 수", style = "font-size: 140%;"), 
             icon = icon("thumbs-up"), 
             color = "maroon")
  })
  
  output$vbox11 <- renderValueBox({
    
    abc11 <- net %>% filter(CTPRVN_NM %in% input$regioncInput) %>% nrow()
    
    valueBox(width = 2, 
             value = tags$p(abc11, style = "font-size: 150%;"),
             subtitle = tags$p("NET인증 기업 수", style = "font-size: 140%;"), 
             icon = icon("thumbs-up"), 
             color = "fuchsia")
  })
  
  output$plot7 <- renderPlotly({

    TRNSFRN_count %>%
      plot_ly(y=~TRNSFRN_CTPRVN_NM) %>%
      add_trace(x=~n, type='bar',frame=~STDR_YM,textfont=list(size=20),
                colors = mycolors,orientation = 'h',
                color=~TRNSFRN_CTPRVN_NM,text = ~n,
                hoverinfo = 'x+y',
                #hovertemplate = paste('%{y}', '<br>전입:', '%{x}', '<br>'),
                texttemplate = '%{x}',
                textposition = "outside") %>%
      animation_opts(
        frame = 1000,
        transition = 500,
        mode = 'next'
      )  %>%
      animation_slider(
        currentvalue = list(prefix = "DATE : ", font = list(color="red"))
      ) %>%
      layout(
        title = list(text="전입 기업 수",
                     yanchor='top',font=list(size=20)),
        yaxis = list(title = "지역",visible=T,categoryorder="max ascending"),
        xaxis = list(title = "",visible=T),
        font = list(size=18),
        showlegend = F,
        legend = list(x=-0.2),
        margin=list(t=70)
      )
  })


  output$plot9 <- renderPlotly({

    MVT_count %>%
      plot_ly(y=~MVT_CTPRVN_NM) %>%
      add_trace(x=~n, type='bar',frame=~STDR_YM,textfont=list(size=20),
                colors = mycolors,orientation = 'h',
                color=~MVT_CTPRVN_NM,text = ~n,
                hoverinfo = 'x+y',
                #hovertemplate = paste('%{y}', '<br>전입:', '%{x}', '<br>'),
                texttemplate = '%{x}',
                textposition = "outside") %>%
      animation_opts(
        frame = 1000,
        transition = 500,
        mode = 'next'
      )  %>%
      animation_slider(
        currentvalue = list(prefix = "DATE : ", font = list(color="red"))
      ) %>%
      layout(
        title = list(text="전출 기업 수",
                     yanchor='top',font=list(size=20)),
        yaxis = list(title = "지역",visible=T,categoryorder="max ascending"),
        xaxis = list(title = "",visible=T),
        showlegend = F,
        font = list(size=18),
        legend = list(x=-0.2),
        margin=list(t=70)
      )
  })
  
  output$preImage <- renderImage({
    filename <- normalizePath(file.path('./www',
                                        paste('salesmap', '.gif', sep='')))
    
    list(src = filename,
         width = 530,
         height = 580)
    
  }, deleteFile = FALSE)
  
  
  output$preImage2 <- renderImage({
    filename <- normalizePath(file.path('./www',
                                        paste('debtsmap', '.gif', sep='')))
    
    list(src = filename,
         width = 530,
         height = 580)
    
  }, deleteFile = FALSE)
  
  
  
  output$preImage3 <- renderImage({
    filename <- normalizePath(file.path('./www',
                                        paste('연결성빈도', '.gif', sep='')))
    
    list(src = filename,
         width = 750,
         height = 700)
    
  }, deleteFile = FALSE)
  
  
  output$plot10 <- renderPlotly({
    
    filtered9 <- REGION_CTPRVN %>% filter(TRNSFRN_CTPRVN_NM %in% input$regiondInput)
    
    filtered9 %>%
      arrange(desc(STDR_YM),desc(counts)) %>%
      group_by(STDR_YM) %>%
      mutate(rank = dense_rank(desc(counts))) %>%
      group_by(STDR_YM) %>%
      mutate(rank_01=ifelse(rank>7,0,1)) %>%
      group_by(STDR_YM, rank_01) %>%
      mutate(rank_sum=ifelse(rank_01==1, counts,sum(counts))) %>%
      group_by(STDR_YM) %>%
      filter(rank <9) %>%
      mutate(INDUTY_LCLAS_NM=ifelse(rank==8, '기타',INDUTY_LCLAS_NM)) %>%
      mutate(counts=rank_sum) %>%
      dplyr::select(STDR_YM,TRNSFRN_CTPRVN_NM,INDUTY_LCLAS_NM,counts) %>% 
      plot_ly(labels = ~INDUTY_LCLAS_NM, values = ~counts, type = 'pie',
              textinfo='label',
              frame=~STDR_YM, sort=FALSE, rotation=90,
              textfont=list(size=18,color='black'),#textinfo='label+percent',
              marker=list(colors = c('#fbb4ae','#b3cde3','#ccebc5','#decbe4','#fed9a6','#ffffcc','#e5d8bd','#fddaec','#f2f2f2','#8dd3c7','#ffffb3','#bebada','#fb8072','#fdb462','#b3de69','#fccde5','#ccebc5','#ffed6f')), hole=0.6,
              title = list(text = paste(input$regiondInput, " 전입 업종 비율 <br>시계열 그래프"),x=0.48,
                           y=0.99,font=list(size=18))) %>% 
      layout(
        width=600, height=600,
        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
        showlegend = F,
        margin=list(l=250)) %>%
      animation_slider(
        currentvalue = list(prefix = "DATE ", font = list(color="red"))
      ) %>% 
      animation_opts(frame = 1000)
  })
  
  
  output$plot11 <- renderPlotly({
    
    filtered10 <- REGION_MVT %>% filter(MVT_CTPRVN_NM %in% input$regiondInput)
    
    filtered10 %>%
      arrange(desc(STDR_YM),desc(counts)) %>%
      group_by(STDR_YM) %>%
      mutate(rank = dense_rank(desc(counts))) %>%
      group_by(STDR_YM) %>%
      mutate(rank_01=ifelse(rank>7,0,1)) %>%
      group_by(STDR_YM, rank_01) %>%
      mutate(rank_sum=ifelse(rank_01==1, counts,sum(counts))) %>%
      group_by(STDR_YM) %>%
      filter(rank <9) %>%
      mutate(INDUTY_LCLAS_NM=ifelse(rank==8, '기타',INDUTY_LCLAS_NM)) %>%
      mutate(counts=rank_sum) %>%
      dplyr::select(STDR_YM,MVT_CTPRVN_NM,INDUTY_LCLAS_NM,counts) %>% 
      plot_ly(labels = ~INDUTY_LCLAS_NM, values = ~counts, type = 'pie',
              textinfo='label',
              frame=~STDR_YM, sort=FALSE, rotation=90,
              textfont=list(size=18,color='black'),#textinfo='label+percent',
              marker=list(colors = c('#fbb4ae','#b3cde3','#ccebc5','#decbe4','#fed9a6','#ffffcc','#e5d8bd','#fddaec','#f2f2f2','#8dd3c7','#ffffb3','#bebada','#fb8072','#fdb462','#b3de69','#fccde5','#ccebc5','#ffed6f')), hole=0.6,
              title = list(text = paste(input$regiondInput, " 전출 업종 비율 <br>시계열 그래프"),x=0.48,
                           y=0.99,font=list(size=18))) %>% 
      layout(
        width=600, height=600,
        xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
        yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
        showlegend = F,
        margin=list(l=250)) %>%
      animation_slider(
        currentvalue = list(prefix = "DATE ", font = list(color="red"))
      ) %>% 
      animation_opts(frame = 1000)
  })
  
  observe({
    if (input$Uncheck > 0) {
      updateCheckboxGroupInput(session=session, inputId="regioncInput", choices=c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                                                                  "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"), selected=NULL)
      updateCheckboxGroupInput(session=session, inputId="companysizeInput", choices=c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"), selected=NULL)

    }
  })
  
  observe({
    if (input$checkall > 0) {
      updateCheckboxGroupInput(session=session, inputId="regioncInput", choices=c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                                                                  "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"),
                               selected = c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                            "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"))
      updateCheckboxGroupInput(session=session, inputId="companysizeInput", choices=c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"),
                               selected = c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"))
    }
    
    if (input$checkall < 1) {
      updateCheckboxGroupInput(session=session, inputId="regioncInput", choices=c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                                                                  "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"),
                               selected = c("강원", "경기", "경남", "경북", "광주", "대구", "대전", "부산", "서울",
                                            "세종", "울산", "인천", "전남", "전북", "제주", "충남", "충북"))
      updateCheckboxGroupInput(session=session, inputId="companysizeInput", choices=c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"),
                               selected = c("대기업", "중기업", "중견기업", "소기업", "미분류", "판단제외"))
      
    }
  })
  
  observe({
    if (input$Uncheck2 > 0) {
      updateCheckboxGroupInput(session=session, inputId="worktypeInput", choices=c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                                                                   "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                                                                   "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                                                                   "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                                                                   "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                                                                   "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                                                                   "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                                                                   "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                                                                   "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"),
                               selected = NULL)
    }
  })
  
  observe({
    if (input$checkall2 > 0) {
      updateCheckboxGroupInput(session=session, inputId="worktypeInput", choices=c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                                                                   "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                                                                   "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                                                                   "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                                                                   "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                                                                   "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                                                                   "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                                                                   "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                                                                   "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"),
                               selected = c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                            "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                            "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                            "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                            "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                            "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                            "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                            "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                            "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"))
    }
    
    if (input$checkall2 < 1) {
      updateCheckboxGroupInput(session=session, inputId="worktypeInput", choices=c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                                                                   "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                                                                   "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                                                                   "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                                                                   "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                                                                   "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                                                                   "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                                                                   "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                                                                   "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"),
                               selected = c("가구 내 고용활동 및 달리 분류되지 않은 자가소비 생산활동",
                                            "건설업", "공공행정; 국방 및 사회보장 행정", "광업",
                                            "교육 서비스업", "국제 및 외국기관", "금융 및 보험업",
                                            "농업; 임업 및 어업", "도매 및 소매업", "보건업 및 사회복지 서비스업",
                                            "부동산업", "사업시설 관리; 사업 지원 및 임대 서비스업",
                                            "수도; 하수 및 폐기물 처리; 원료 재생업", "숙박 및 음식점업",
                                            "예술; 스포츠 및 여가관련 서비스업", "운수 및 창고업",
                                            "전기; 가스; 증기 및 공기조절 공급업", "전문; 과학 및 기술 서비스업",
                                            "정보통신업", "제조업", "협회 및 단체; 수리 및 기타 개인 서비스업"))
      
    }
  })
  
  
  # observeEvent(
  #   eventExpr = input$selectAll,
  #   handlerExpr = 
  #     {
  #       lapply(paste0("regioncInput", 1:17),
  #              function(x)
  #              {
  #                updateCheckboxInput(session = session, 
  #                                    inputId = x, 
  #                                    value = TRUE)
  #              }
  #       )
  #     }
  # )
  # 
  # 
  # observeEvent(
  #   eventExpr = input$deselectAll,
  #   handlerExpr = 
  #     {
  #       lapply(paste0("regioncInput", 1:17),
  #              function(x)
  #              {
  #                updateCheckboxInput(session = session, 
  #                                    inputId = x, 
  #                                    value = FALSE)
  #              }
  #       )
  #     }
  # )
  
}

# shinyExample()
shinyApp(ui, server)
